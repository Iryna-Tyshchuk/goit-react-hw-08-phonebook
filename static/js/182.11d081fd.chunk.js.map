{"version":3,"file":"static/js/182.11d081fd.chunk.js","mappings":"oOAEaA,E,QAAaC,GAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,kI,uCC8ErC,MAtEA,SAAmBC,GAAqC,IAAlCC,EAAQD,EAARC,SAAQC,EAAAF,EAAEG,YAAAA,OAAW,IAAAD,GAAQA,EAC3CE,GAAeC,EAAAA,EAAAA,UACfC,GAAgBD,EAAAA,EAAAA,UAChBE,GAAmBF,EAAAA,EAAAA,UACnBG,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IAe3B,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAACf,EAAU,CAACK,SAfK,SAAAa,GACnBA,EAAMC,iBAEN,IAAMC,GAAQC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,IACPd,GAAe,CAAEe,KAAMd,EAAae,QAAQC,QAAS,CAAF,GACxDC,MAAOf,EAAca,QAAQC,MAC7BE,SAAUf,EAAiBY,QAAQC,QAErCnB,EAASe,GAETF,EAAMS,OAAOC,OACf,EAIuCX,SAAA,EACjCY,EAAAA,EAAAA,KAAA,MAAAZ,SAAKV,EAAc,UAAY,YAC9BA,EAAc,MACbQ,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACEY,EAAAA,EAAAA,KAAA,QAAAZ,SAAM,YACNY,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CACJC,KAAK,OACLT,KAAK,OACLU,YAAa,kBACbC,IAAKzB,EACL0B,UAAQ,QAIdnB,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACEY,EAAAA,EAAAA,KAAA,QAAAZ,SAAM,cACNY,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CACJC,KAAK,QACLT,KAAK,QACLU,YAAa,oBACbC,IAAKvB,EACLwB,UAAQ,QAGZnB,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACEY,EAAAA,EAAAA,KAAA,QAAAZ,SAAM,gBACNY,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CACJC,KAAK,WACLT,KAAK,WACLa,UAAW,EACXH,YAAa,sBACbC,IAAKtB,EACLuB,UAAQ,QAIZL,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CAACC,SAAqB,YAAXzB,EAAsBmB,KAAK,SAAQd,SAClDV,EAAc,UAAY,eAGnB,YAAXK,IAAwBiB,EAAAA,EAAAA,KAACS,EAAAA,EAAM,MAGtC,C,sECzEaR,E,QAAQ7B,GAAAA,MAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yMAGtB,SAAAoC,GAAK,OAAIA,EAAMC,YAAc,eAAe,G,iHC8BvD,UAzBA,WACE,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAahC,EAAAA,EAAAA,IAAYiC,EAAAA,IACzBC,GAAQlC,EAAAA,EAAAA,IAAYmC,EAAAA,IAY1B,OAVAC,EAAAA,EAAAA,YAAU,WACHJ,GAELF,EAAS,YACX,GAAG,CAACE,EAAYF,KAOd5B,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EACEY,EAAAA,EAAAA,KAAA,MAAIqB,UAAWC,EAAAA,EAAAA,OAAWlC,SAAC,iBAChB,OAAV8B,IAAkBhC,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,+BAA6B8B,MACnDlB,EAAAA,EAAAA,KAACuB,EAAAA,EAAU,CAAC/C,SARI,SAAAe,GAClBqB,GAASY,EAAAA,EAAAA,IAAajC,GACxB,EAMuCb,aAAW,MAGpD,C,qBC/BA,KAAgB,OAAS,oB","sources":["components/Forms/SignUpForm/SignUpForm.styled.jsx","components/Forms/SignUpForm/SignUpForm.jsx","components/Input/Input.jsx","pages/SignInPage.jsx","webpack://goit-react-hw-08-phonebook/./src/components/App/App.module.css?583a"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  max-width: 500px;\n  width: 100%;\n  margin: 0 auto 25px;\n`;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { selectStatus } from 'redux/auth/selectors';\n\nimport { StyledForm } from './SignUpForm.styled';\nimport { Loader } from 'components/Loader/Loader';\nimport { Input } from 'components/Input/Input';\nimport { Button } from 'components/Button/Button';\n\nfunction SignUpForm({ onSubmit, isLoginForm = false }) {\n  const nameInputRef = useRef();\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  const status = useSelector(selectStatus);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const formData = {\n      ...(!isLoginForm && { name: nameInputRef.current.value }),\n      email: emailInputRef.current.value,\n      password: passwordInputRef.current.value,\n    };\n    onSubmit(formData);\n\n    event.target.reset();\n  };\n\n  return (\n    <>\n      <StyledForm onSubmit={handleSubmit}>\n        <h2>{isLoginForm ? 'Sign In' : 'Sign Up'}</h2>\n        {isLoginForm ? null : (\n          <label>\n            <span>Name: </span>\n            <Input\n              type=\"text\"\n              name=\"name\"\n              placeholder={'Enter your name'}\n              ref={nameInputRef}\n              required\n            />\n          </label>\n        )}\n        <label>\n          <span>E-mail: </span>\n          <Input\n            type=\"email\"\n            name=\"email\"\n            placeholder={'Enter your e-mail'}\n            ref={emailInputRef}\n            required\n          />\n        </label>\n        <label>\n          <span>Password: </span>\n          <Input\n            type=\"password\"\n            name=\"password\"\n            minLength={7}\n            placeholder={'Enter your password'}\n            ref={passwordInputRef}\n            required\n          />\n        </label>\n\n        <Button disabled={status === 'pending'} type=\"submit\">\n          {isLoginForm ? 'Sign In' : 'Sign Up'}\n        </Button>\n      </StyledForm>\n      {status === 'pending' && <Loader />}\n    </>\n  );\n}\n\nSignUpForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SignUpForm;\n","import styled from 'styled-components';\nexport const Input = styled.input`\n  padding: 0.5em;\n  margin: 0.5em;\n  color: ${props => props.inputColor || 'palevioletred'};\n  background: papayawhip;\n  border: none;\n  border-radius: 3px;\n  width: 200px;\n  height: 20px;\n  &:active {\n    border: none;\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\n\nimport { selectAuthError, selectIsLoggedIn } from 'redux/auth/selectors';\nimport { loginRequest } from 'redux/auth/operations';\nimport SignUpForm from 'components/Forms/SignUpForm/SignUpForm';\nimport css from '../components/App/App.module.css';\n\nfunction SignInPage() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const error = useSelector(selectAuthError);\n\n  useEffect(() => {\n    if (!isLoggedIn) return;\n\n    navigate('/contacts');\n  }, [isLoggedIn, navigate]);\n\n  const handleLogin = formData => {\n    dispatch(loginRequest(formData));\n  };\n\n  return (\n    <main>\n      <h1 className={css.hidden}>Sign-in page</h1>\n      {error !== null && <p>Oops, some error occured... {error}</p>}\n      <SignUpForm onSubmit={handleLogin} isLoginForm />\n    </main>\n  );\n}\n\nexport default SignInPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"hidden\":\"App_hidden__J7bDI\"};"],"names":["StyledForm","styled","_templateObject","_taggedTemplateLiteral","_ref","onSubmit","_ref$isLoginForm","isLoginForm","nameInputRef","useRef","emailInputRef","passwordInputRef","status","useSelector","selectStatus","_jsxs","_Fragment","children","event","preventDefault","formData","_objectSpread","name","current","value","email","password","target","reset","_jsx","Input","type","placeholder","ref","required","minLength","Button","disabled","Loader","props","inputColor","dispatch","useDispatch","navigate","useNavigate","isLoggedIn","selectIsLoggedIn","error","selectAuthError","useEffect","className","css","SignUpForm","loginRequest"],"sourceRoot":""}